<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试图片</title>
      <link href="2021/01/06/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/"/>
      <url>2021/01/06/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>这里是图片<br><img src="" data-echo="https://blog.lan-mao.top/assets/测试图片/测试图片-1609939506378.png" alt="图片"></p><p><img src="" data-echo="https://blog.lan-mao.top/images/测试图片/测试图片-1609940420332.png" alt="使用图片"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编写一个词法分析器</title>
      <link href="2020/04/09/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/"/>
      <url>2020/04/09/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先声明，文中的一些名称可能不太标准，大部分是我自己的理解。各位看官多多包涵，如果有一些建议可以提出来，我会酌情更改<br>这个词法分析器默认输入的全是 ASCII 码。<br>具体的代码实现使用的语言是Java</p></blockquote><h2 id="分析词法要求"><a href="#分析词法要求" class="headerlink" title="分析词法要求"></a>分析词法要求</h2><p>这个词法分析器有18个令牌。</p><!--code__2--><pre><code>%u27E8letter%u27E9%20%u2192%20a%20%7C%20b%20%7C%20...%20%7C%20z%20%7C%20A%20%7C%20B%20%7C%20...%20%7C%20Z%0A%u27E8digit%u27E9%20%u2192%200%20%7C%201%20%7C%20...%20%7C%209%0A%u27E8id%u27E9%20%u2192%20%u27E8letter%u27E9%20%7B%u27E8letter%u27E9%20%7C%20%u27E8digit%u27E9%7D%0A%u27E8int%u27E9%20%u2192%20%5B+%7C%u2212%5D%20%7B%u27E8digit%u27E9%7D+%0A%u27E8float%u27E9%20%u2192%20%5B+%7C%u2212%5D%20%28%20%7B%u27E8digit%u27E9%7D+%20%22.%22%20%7B%u27E8digit%u27E9%7D%20%20%7C%20%20%22.%22%20%7B%u27E8digit%u27E9%7D+%20%29%0A%u27E8floatE%u27E9%20%u2192%20%28%u27E8int%u27E9%20%7C%20%u27E8float%u27E9%29%20%28e%7CE%29%20%5B+%7C%u2212%5D%20%7B%u27E8digit%u27E9%7D+%0A%u27E8floatF%u27E9%20%u2192%20%28%u27E8int%u27E9%20%7C%20%u27E8float%u27E9%20%7C%20%u27E8floatE%u27E9%29%20%28%22f%22%20%7C%20%22F%22%29%0A%u27E8add%u27E9%20%u2192%20+%0A%u27E8sub%u27E9%20%u2192%20%u2212%0A%u27E8mul%u27E9%20%u2192%20*%0A%u27E8div%u27E9%20%u2192%20/%0A%u27E8lt%u27E9%20%u2192%20%3C%0A%u27E8le%u27E9%20%u2192%20%22%3C%3D%22%0A%u27E8gt%u27E9%20%u2192%20%3E%0A%u27E8ge%u27E9%20%u2192%20%22%3E%3D%22%0A%u27E8eq%u27E9%20%u2192%20%3D%0A%u27E8LParen%u27E9%20%u2192%20%28%0A%u27E8RParen%u27E9%20%u2192%20%29%0A%u27E8LBrace%u27E9%20%u2192%20%7B%0A%u27E8RBrace%u27E9%20%u2192%20%7D%20</code></pre><!--//code__2--><p>对应的 DFA ：</p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200424103922_1bb6e3d62217a04ed6e5293d0111a298.png" alt="20200424103922_1bb6e3d62217a04ed6e5293d0111a298.png"></p><p>另外还有10个关键字：</p><blockquote><p>if, then, else, or, and, not, pair, first, second, nil </p></blockquote><p>我们需要通过程序实现读入一个文件，分析其中对应的词法状态，并将其输出出来。</p><p>示例：</p><!--code__3--><pre><code>%u8F93%u5165%u6587%u672C%uFF1A%0A5%0A+5%0A-5%0A1234%0A+1234%0A-1234%0A%0A+%20-%20*%20/%20%28%20%29%20%7B%20%7D%0A%3C%20%3E%20%3C%3D%20%3E%3D%20%3D%0A%3C%20%3D%20%3E%20%3D%0A%5B%20%5D%0A%7C%7C%20%26%26%20%21%0A%2C%0A%3A%0A%3B%0A%0A%u8F93%u51FA%u7ED3%u679C%uFF1A%0A5%20%20%20%3A%20Int%0A+5%20%20%20%3A%20Int%0A-5%20%20%20%3A%20Int%0A1234%20%20%20%3A%20Int%0A+1234%20%20%20%3A%20Int%0A-1234%20%20%20%3A%20Int%0A+%20%20%20%3A%20Add%0A-%20%20%20%3A%20Sub%0A*%20%20%20%3A%20Mul%0A/%20%20%20%3A%20Div%0A%28%20%20%20%3A%20LParen%0A%29%20%20%20%3A%20RParen%0A%7B%20%20%20%3A%20LBrace%0A%7D%20%20%20%3A%20RBrace%0A%3C%20%20%20%3A%20Lt%0A%3E%20%20%20%3A%20Gt%0A%3C%3D%20%20%20%3A%20Le%0A%3E%3D%20%20%20%3A%20Ge%0A%3D%20%20%20%3A%20Eq%0A%3C%20%20%20%3A%20Lt%0A%3D%20%20%20%3A%20Eq%0A%3E%20%20%20%3A%20Gt%0A%3D%20%20%20%3A%20Eq%0A%5B%20%3A%20Lexical%20Error%2C%20invalid%20token%0A%5D%20%3A%20Lexical%20Error%2C%20invalid%20token%0A%7C%20%3A%20Lexical%20Error%2C%20invalid%20token%0A%7C%20%3A%20Lexical%20Error%2C%20invalid%20token%0A%26%20%3A%20Lexical%20Error%2C%20invalid%20token%0A%26%20%3A%20Lexical%20Error%2C%20invalid%20token%0A%21%20%3A%20Lexical%20Error%2C%20invalid%20token%0A%2C%20%3A%20Lexical%20Error%2C%20invalid%20token%0A%3A%20%3A%20Lexical%20Error%2C%20invalid%20token%0A%3B%20%3A%20Lexical%20Error%2C%20invalid%20token</code></pre><!--//code__3--><!--code__4--><pre><code>%u8F93%u5165%u6587%u672C%uFF1A%0Aif%0Athen%0Aelse%0Aor%0Aand%0Anot%0Apair%0Afirst%0Asecond%0Anil%0A%0Ai%0Athe%0Aels%0Ao%0Aan%0Ano%0Apai%0Afirs%0Asecon%0Ani%0A%0Aiff%0Athena%0Aelsep%0Aore%0Aandq%0Anot+%0Apair%3F%0Afirst@%0Asecond+%0Anil-%0A%0AIf%0ATHEN%0AElse%0AoR%0AaNd%0AnoT%0APAIR%0AfirstHand%0AsecondHand%0Anilnull%0A%0Aifthenelse%0Athen316%0Aeelse%0Aorttt%0ACS316and%0Anot%23%0APpair%0Afir%25st%0A%24second%0An%5Bil%0ACS316_CS316project1_and_abvc_or%0A%0A%u8F93%u51FA%u7ED3%u679C%uFF1A%0Aif%20%20%20%3A%20Keyword_if%0Athen%20%20%20%3A%20Keyword_then%0Aelse%20%20%20%3A%20Keyword_else%0Aor%20%20%20%3A%20Keyword_or%0Aand%20%20%20%3A%20Keyword_and%0Anot%20%20%20%3A%20Keyword_not%0Apair%20%20%20%3A%20Keyword_pair%0Afirst%20%20%20%3A%20Keyword_first%0Asecond%20%20%20%3A%20Keyword_second%0Anil%20%20%20%3A%20Keyword_nil%0Ai%20%20%20%3A%20Id%0Athe%20%20%20%3A%20Id%0Aels%20%20%20%3A%20Id%0Ao%20%20%20%3A%20Id%0Aan%20%20%20%3A%20Id%0Ano%20%20%20%3A%20Id%0Apai%20%20%20%3A%20Id%0Afirs%20%20%20%3A%20Id%0Asecon%20%20%20%3A%20Id%0Ani%20%20%20%3A%20Id%0Aiff%20%20%20%3A%20Id%0Athena%20%20%20%3A%20Id%0Aelsep%20%20%20%3A%20Id%0Aore%20%20%20%3A%20Id%0Aandq%20%20%20%3A%20Id%0Anot%20%20%20%3A%20Keyword_not%0A+%20%20%20%3A%20Add%0Apair%20%20%20%3A%20Keyword_pair%0A%3F%20%3A%20Lexical%20Error%2C%20invalid%20token%0Afirst%20%20%20%3A%20Keyword_first%0A@%20%3A%20Lexical%20Error%2C%20invalid%20token%0Asecond%20%20%20%3A%20Keyword_second%0A+%20%20%20%3A%20Add%0Anil%20%20%20%3A%20Keyword_nil%0A-%20%20%20%3A%20Sub%0AIf%20%20%20%3A%20Id%0ATHEN%20%20%20%3A%20Id%0AElse%20%20%20%3A%20Id%0AoR%20%20%20%3A%20Id%0AaNd%20%20%20%3A%20Id%0AnoT%20%20%20%3A%20Id%0APAIR%20%20%20%3A%20Id%0AfirstHand%20%20%20%3A%20Id%0AsecondHand%20%20%20%3A%20Id%0Anilnull%20%20%20%3A%20Id%0Aifthenelse%20%20%20%3A%20Id%0Athen316%20%20%20%3A%20Id%0Aeelse%20%20%20%3A%20Id%0Aorttt%20%20%20%3A%20Id%0ACS316and%20%20%20%3A%20Id%0Anot%20%20%20%3A%20Keyword_not%0A%23%20%3A%20Lexical%20Error%2C%20invalid%20token%0APpair%20%20%20%3A%20Id%0Afir%20%20%20%3A%20Id%0A%25%20%3A%20Lexical%20Error%2C%20invalid%20token%0Ast%20%20%20%3A%20Id%0A%24%20%3A%20Lexical%20Error%2C%20invalid%20token%0Asecond%20%20%20%3A%20Keyword_second%0An%20%20%20%3A%20Id%0A%5B%20%3A%20Lexical%20Error%2C%20invalid%20token%0Ail%20%20%20%3A%20Id%0ACS316%20%20%20%3A%20Id%0A_%20%3A%20Lexical%20Error%2C%20invalid%20token%0ACS316project1%20%20%20%3A%20Id%0A_%20%3A%20Lexical%20Error%2C%20invalid%20token%0Aand%20%20%20%3A%20Keyword_and%0A_%20%3A%20Lexical%20Error%2C%20invalid%20token%0Aabvc%20%20%20%3A%20Id%0A_%20%3A%20Lexical%20Error%2C%20invalid%20token%0Aor%20%20%20%3A%20Keyword_or</code></pre><!--//code__4--><h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><h3 id="存储词法结构"><a href="#存储词法结构" class="headerlink" title="存储词法结构"></a>存储词法结构</h3><p>首先使用<code>枚举类</code>记录所有可能的状态，比如18个令牌，和开始、结束、错误状态，以及一些中间状态：Dot、E、EPlusMinus，和10个关键字。  </p><!--code__5--><pre><code class="java">public%20enum%20State%20%7B%0A%20%20%20%20Start%2C%0A%20%20%20%20Error%2C%0A%20%20%20%20End%2C%0A%0A%20%20%20%20Id%2C%0A%20%20%20%20Int%2C%0A%20%20%20%20Float%2C%0A%20%20%20%20FloatE%2C%0A%20%20%20%20FloatF%2C%0A%20%20%20%20Add%2C%0A%20%20%20%20Sub%2C%0A%20%20%20%20Mul%2C%0A%20%20%20%20Div%2C%0A%20%20%20%20Lt%2C%0A%20%20%20%20Le%2C%0A%20%20%20%20Gt%2C%0A%20%20%20%20Ge%2C%0A%20%20%20%20Eq%2C%0A%20%20%20%20LParen%2C%0A%20%20%20%20RParen%2C%0A%20%20%20%20LBrace%2C%0A%20%20%20%20RBrace%2C%0A%0A%20%20%20%20Dot%2C%0A%20%20%20%20E%2C%0A%20%20%20%20EPlusMinus%2C%0A%0A%20%20%20%20Keyword_if%2C%0A%20%20%20%20Keyword_then%2C%0A%20%20%20%20Keyword_else%2C%0A%20%20%20%20Keyword_or%2C%0A%20%20%20%20Keyword_and%2C%0A%20%20%20%20Keyword_not%2C%0A%20%20%20%20Keyword_first%2C%0A%20%20%20%20Keyword_second%2C%0A%20%20%20%20Keyword_nil%2C%0A%20%20%20%20Keyword_pair%3B%0A%7D</code></pre><!--//code__5--><p>我觉得词法分析器中最重要的是：如何实现方便保存词法以及对应的状态，并且在使用的时候可以轻松的使用。一开始我用 switch…case 语句，但是这种方法写出来的代码冗长，并且包含了大量的逻辑分析，一旦写错修改起来十分麻烦。后来查询一些资料，改用二维数组存储数据。  </p><p>将二维数组的第一个下标对应每一个状态的位置，第二个下标对应 ASCII 码的128个字符。在Java中枚举类的每一个状态都有对应的位置值。而对应状态的位置值对应的一维数组保存着在此状态下下一个输入字符对应的状态。</p><p>使用了数组存储以后，只需要知道当前状态以及下一个字符，就可以通过下标直接访问对应的下一个状态。</p><!--code__6--><pre><code class="java">public%20static%20void%20initNextState%28%29%20%7B%0A%20%20%20%20for%20%28int%20i%20%3D%200%3B%20i%20%3C%3D%20State.size%3B%20i++%29%20%7B%0A%20%20%20%20%20%20%20%20for%20%28int%20y%20%3D%200%3B%20y%20%3C%20128%3B%20y++%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20nextState%5Bi%5D%5By%5D%20%3D%20State.Error%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20for%20%28int%20i%20%3D%20%270%27%3B%20i%20%3C%3D%20%279%27%3B%20i++%29%20%7B%0A%20%20%20%20%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5Bi%5D%20%3D%20State.Int%3B%0A%20%20%20%20%20%20%20%20nextState%5BState.Id.ordinal%28%29%5D%5Bi%5D%20%3D%20State.Id%3B%0A%20%20%20%20%20%20%20%20nextState%5BState.Int.ordinal%28%29%5D%5Bi%5D%20%3D%20State.Int%3B%0A%20%20%20%20%20%20%20%20nextState%5BState.Add.ordinal%28%29%5D%5Bi%5D%20%3D%20State.Int%3B%0A%20%20%20%20%20%20%20%20nextState%5BState.Sub.ordinal%28%29%5D%5Bi%5D%20%3D%20State.Int%3B%0A%20%20%20%20%20%20%20%20nextState%5BState.Float.ordinal%28%29%5D%5Bi%5D%20%3D%20State.Float%3B%0A%20%20%20%20%20%20%20%20nextState%5BState.Dot.ordinal%28%29%5D%5Bi%5D%20%3D%20State.Float%3B%0A%20%20%20%20%20%20%20%20nextState%5BState.E.ordinal%28%29%5D%5Bi%5D%20%3D%20State.FloatE%3B%0A%20%20%20%20%20%20%20%20nextState%5BState.FloatE.ordinal%28%29%5D%5Bi%5D%20%3D%20State.FloatE%3B%0A%20%20%20%20%20%20%20%20nextState%5BState.EPlusMinus.ordinal%28%29%5D%5Bi%5D%20%3D%20State.FloatE%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20for%20%28int%20i%20%3D%20%27a%27%3B%20i%20%3C%3D%20%27z%27%3B%20i++%29%20%7B%0A%20%20%20%20%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5Bi%5D%20%3D%20State.Id%3B%0A%20%20%20%20%20%20%20%20nextState%5BState.Id.ordinal%28%29%5D%5Bi%5D%20%3D%20State.Id%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20for%20%28int%20i%20%3D%20%27A%27%3B%20i%20%3C%3D%20%27Z%27%3B%20i++%29%20%7B%0A%20%20%20%20%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5Bi%5D%20%3D%20State.Id%3B%0A%20%20%20%20%20%20%20%20nextState%5BState.Id.ordinal%28%29%5D%5Bi%5D%20%3D%20State.Id%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27*%27%5D%20%3D%20State.Mul%3B%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27/%27%5D%20%3D%20State.Div%3B%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27%28%27%5D%20%3D%20State.LParen%3B%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27%29%27%5D%20%3D%20State.RParen%3B%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27%7B%27%5D%20%3D%20State.LBrace%3B%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27%7D%27%5D%20%3D%20State.RBrace%3B%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27%3C%27%5D%20%3D%20State.Lt%3B%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27%3E%27%5D%20%3D%20State.Gt%3B%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27%3D%27%5D%20%3D%20State.Eq%3B%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27+%27%5D%20%3D%20State.Add%3B%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27-%27%5D%20%3D%20State.Sub%3B%0A%20%20%20%20nextState%5BState.Start.ordinal%28%29%5D%5B%27.%27%5D%20%3D%20State.Dot%3B%0A%0A%20%20%20%20nextState%5BState.Lt.ordinal%28%29%5D%5B%27%3D%27%5D%20%3D%20State.Le%3B%0A%20%20%20%20nextState%5BState.Gt.ordinal%28%29%5D%5B%27%3D%27%5D%20%3D%20State.Ge%3B%0A%0A%20%20%20%20nextState%5BState.Int.ordinal%28%29%5D%5B%27f%27%5D%20%3D%20State.FloatF%3B%0A%20%20%20%20nextState%5BState.Int.ordinal%28%29%5D%5B%27F%27%5D%20%3D%20State.FloatF%3B%0A%20%20%20%20nextState%5BState.Float.ordinal%28%29%5D%5B%27f%27%5D%20%3D%20State.FloatF%3B%0A%20%20%20%20nextState%5BState.Float.ordinal%28%29%5D%5B%27F%27%5D%20%3D%20State.FloatF%3B%0A%20%20%20%20nextState%5BState.FloatE.ordinal%28%29%5D%5B%27f%27%5D%20%3D%20State.FloatF%3B%0A%20%20%20%20nextState%5BState.FloatE.ordinal%28%29%5D%5B%27F%27%5D%20%3D%20State.FloatF%3B%0A%0A%20%20%20%20nextState%5BState.Int.ordinal%28%29%5D%5B%27e%27%5D%20%3D%20State.E%3B%0A%20%20%20%20nextState%5BState.Int.ordinal%28%29%5D%5B%27E%27%5D%20%3D%20State.E%3B%0A%20%20%20%20nextState%5BState.Float.ordinal%28%29%5D%5B%27e%27%5D%20%3D%20State.E%3B%0A%20%20%20%20nextState%5BState.Float.ordinal%28%29%5D%5B%27E%27%5D%20%3D%20State.E%3B%0A%0A%20%20%20%20nextState%5BState.Add.ordinal%28%29%5D%5B%27.%27%5D%20%3D%20State.Dot%3B%0A%20%20%20%20nextState%5BState.Sub.ordinal%28%29%5D%5B%27.%27%5D%20%3D%20State.Dot%3B%0A%20%20%20%20nextState%5BState.Int.ordinal%28%29%5D%5B%27.%27%5D%20%3D%20State.Float%3B%0A%0A%20%20%20%20nextState%5BState.E.ordinal%28%29%5D%5B%27+%27%5D%20%3D%20State.EPlusMinus%3B%0A%20%20%20%20nextState%5BState.E.ordinal%28%29%5D%5B%27-%27%5D%20%3D%20State.EPlusMinus%3B%0A%0A%7D</code></pre><!--//code__6--><p>然后使用一个 map 保存关键字：</p><!--code__7--><pre><code class="java">public%20static%20void%20initKeywordMap%28%29%20%7B%0A%20%20%20%20keywordMap.put%28%22if%22%2C%20State.Keyword_if%29%3B%0A%20%20%20%20keywordMap.put%28%22then%22%2C%20State.Keyword_then%29%3B%0A%20%20%20%20keywordMap.put%28%22else%22%2C%20State.Keyword_else%29%3B%0A%20%20%20%20keywordMap.put%28%22or%22%2C%20State.Keyword_or%29%3B%0A%20%20%20%20keywordMap.put%28%22and%22%2C%20State.Keyword_and%29%3B%0A%20%20%20%20keywordMap.put%28%22not%22%2C%20State.Keyword_not%29%3B%0A%20%20%20%20keywordMap.put%28%22pair%22%2C%20State.Keyword_pair%29%3B%0A%20%20%20%20keywordMap.put%28%22first%22%2C%20State.Keyword_first%29%3B%0A%20%20%20%20keywordMap.put%28%22second%22%2C%20State.Keyword_second%29%3B%0A%20%20%20%20keywordMap.put%28%22nil%22%2C%20State.Keyword_nil%29%3B%0A%7D</code></pre><!--//code__7--><h3 id="核心驱动器实现"><a href="#核心驱动器实现" class="headerlink" title="核心驱动器实现"></a>核心驱动器实现</h3><p>保存好所需要的数据以后，就开始实现将输入的字符分析对应每一个状态。</p><p>首先我们先创建一个IO工具类，以便于方便的实现输入输出，以及对输入输出位置的设置。</p><!--code__8--><pre><code class="java">public%20class%20IO%20%7B%0A%20%20%20%20private%20static%20BufferedReader%20reader%20%3D%20null%3B%0A%20%20%20%20private%20static%20BufferedWriter%20writer%20%3D%20null%3B%0A%0A%20%20%20%20//%u7528%u4E8E%u5B58%u50A8%u8BFB%u53D6%u5230%u7684%u6240%u6709%u6587%u5B57%0A%20%20%20%20private%20static%20StringBuilder%20text%20%3D%20new%20StringBuilder%28%29%3B%0A%20%20%20%20//%u8BB0%u5F55%u5F53%u524D%u8BFB%u53D6%u5230%u7684%u4F4D%u7F6E%0A%20%20%20%20private%20static%20int%20flag%20%3D%200%3B%0A%0A%20%20%20%20public%20static%20void%20setIO%28String%5B%5D%20values%29%20%7B%0A%20%20%20%20%20%20%20%20if%20%28values.length%20%21%3D%200%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20String%20inPath%20%3D%20values%5B0%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20String%20outPath%20%3D%20values%5B1%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20reader%20%3D%20new%20BufferedReader%28new%20FileReader%28inPath%29%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20writer%20%3D%20new%20BufferedWriter%28new%20FileWriter%28outPath%29%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20%28IOException%20e%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20reader%20%3D%20new%20BufferedReader%28new%20InputStreamReader%28System.in%29%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20writer%20%3D%20new%20BufferedWriter%28new%20OutputStreamWriter%28System.out%29%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%0A%20%20%20%20/**%0A%20%20%20%20%20*%20%u83B7%u53D6%u4E0B%u4E00%u4E2A%u5B57%u7B26%0A%20%20%20%20%20*%0A%20%20%20%20%20*%20@return%20%u8FD4%u56DE%u4E0B%u4E00%u4E2A%u5B57%u7B26%uFF0C%u5982%u679C%u5230%u8FBE%u7ED3%u5C3E%u8FD4%u56DE-1%0A%20%20%20%20%20*/%0A%20%20%20%20public%20static%20int%20getNextChar%28%29%20%7B%0A%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20//%u5F53flag%u5904%u4E8Etext%u6700%u540E%u4E00%u4F4D%u65F6%uFF0Cflag%u4E3Atext.length-1%uFF0C%u6B64%u65F6%u81EA%u589E1%uFF0Cflag%3D%3Dtext.length%u8BF4%u660E%u4E0A%u4E00%u6B21%u8BFB%u53D6%u5904%u4E8E%u7ED3%u5C3E%0A%20%20%20%20%20%20%20%20%20%20%20%20//%u5982%u679C%u6807%u5FD7%u4F4D%u4E3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28flag%20%3D%3D%20text.length%28%29%29%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20char%5B%5D%20temp%20%3D%20new%20char%5B10%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20length%20%3D%20reader.read%28temp%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28length%20%3D%3D%20-1%29%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20-1%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20text.append%28new%20String%28temp%2C%200%2C%20length%29%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20text.charAt%28flag++%29%3B%0A%20%20%20%20%20%20%20%20%7D%20catch%20%28IOException%20e%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20-1%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20/**%0A%20%20%20%20%20*%20%u5C06%u6307%u9488flag%u4F4D%u7F6E%u524D%u79FB%u4E00%u4F4D%0A%20%20%20%20%20*/%0A%20%20%20%20public%20static%20void%20forward%28%29%20%7B%0A%20%20%20%20%20%20%20%20if%20%28flag%20%3E%3D%200%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20flag--%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20boolean%20hasNext%28%29%7B%0A%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28flag%20%3C%20text.length%28%29%29%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20true%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7Delse%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20char%5B%5D%20temp%20%3D%20new%20char%5B10%5D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20length%20%3D%20reader.read%28temp%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28length%20%3D%3D%20-1%29%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20text.append%28new%20String%28temp%2C%200%2C%20length%29%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20true%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%20catch%20%28IOException%20e%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20/**%0A%20%20%20%20%20*%20%u5411%u8F93%u51FA%u6D41%u4E2D%u5199%u5165%u5B57%u7B26%u4E32%0A%20%20%20%20%20*%0A%20%20%20%20%20*%20@param%20value%20%u9700%u8981%u5199%u5165%u7684%u5B57%u7B26%u4E32%0A%20%20%20%20%20*/%0A%20%20%20%20public%20static%20void%20print%28String%20value%29%20%7B%0A%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20writer.write%28value%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20writer.flush%28%29%3B%0A%20%20%20%20%20%20%20%20%7D%20catch%20%28IOException%20e%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20/**%0A%20%20%20%20%20*%20%u5411%u8F93%u51FA%u6D41%u4E2D%u5199%u5165%u5B57%u7B26%u4E32%u5E76%u6362%u884C%0A%20%20%20%20%20*%0A%20%20%20%20%20*%20@param%20value%20%u9700%u8981%u5199%u5165%u7684%u5B57%u7B26%u4E32%0A%20%20%20%20%20*/%0A%20%20%20%20public%20static%20void%20println%28String%20value%29%20%7B%0A%20%20%20%20%20%20%20%20print%28value%20+%20%27%5Cn%27%29%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20close%28%29%20%7B%0A%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20reader.close%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20writer.close%28%29%3B%0A%20%20%20%20%20%20%20%20%7D%20catch%20%28IOException%20e%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D</code></pre><!--//code__8--><p>接下来可以实现读取并分析输入文本中的词法分析</p><!--code__9--><pre><code class="java">/**%0A%20%20%20%20*%20%u5F53%u524D%u7684%u72B6%u6001%0A%20%20%20%20*/%0Apublic%20static%20State%20state%20%3D%20State.Start%3B%0A%0Apublic%20static%20void%20getState%28%29%7B%0A%20%20%20%20state%20%3D%20State.Start%3B%0A%20%20%20%20sb.delete%280%2Csb.length%28%29%29%3B%0A%20%20%20%20int%20value%20%3D%200%3B%0A%20%20%20%20if%20%28%21IO.hasNext%28%29%29%7B%0A%20%20%20%20%20%20%20%20state%20%3D%20State.End%3B%0A%20%20%20%20%20%20%20%20return%3B%0A%20%20%20%20%7D%0A%20%20%20%20while%20%28%28value%20%3D%20IO.getNextChar%28%29%29%20%21%3D%20-1%29%7B%0A%20%20%20%20%20%20%20%20char%20charTemp%20%3D%20%28char%29value%3B%0A%20%20%20%20%20%20%20%20if%20%28charTemp%20%3E%20127%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20state%20%3D%20State.Error%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20State%20stateTemp%20%3D%20nextState%5Bstate.ordinal%28%29%5D%5BcharTemp%5D%3B%0A%20%20%20%20%20%20%20%20//%u83B7%u53D6%u4E0B%u4E00%u4E2A%u72B6%u6001%uFF0C%u5982%u679C%u662F%u9519%u8BEF%uFF0C%u5219%u5224%u65AD%u4E0A%u4E00%u4E2A%u72B6%u6001%u662F%u5426%u5DF2%u7ECF%u53EF%u4EE5%u7ED3%u675F%uFF0C%u53EF%u4EE5%u5219%u8F93%u51FA%u5F53%u524D%u7684%u72B6%u6001%0A%20%20%20%20%20%20%20%20if%20%28stateTemp%20%3D%3D%20State.Error%20%7C%7CCharacter.isWhitespace%28charTemp%29%29%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28state.isEnd%28%29%29%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28state%20%3D%3D%20State.Id%29%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20state%20%3D%20keywordCheck%28state%2Csb.toString%28%29%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28sb.length%28%29%20%3E%200%20%26%26%20%21Character.isWhitespace%28charTemp%29%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%u5982%u679C%u72B6%u6001%u5DF2%u7ECF%u7ED3%u675F%uFF0C%u5219%u5C06%u6807%u5FD7%u4F4D%u524D%u79FB%u4E00%u4F4D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20IO.forward%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7Delse%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28state%20%3D%3D%20State.Start%20%26%26%20Character.isWhitespace%28charTemp%29%29%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7Delse%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20state%20%3D%20State.Error%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28%21Character.isWhitespace%28charTemp%29%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sb.append%28charTemp%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20%7Delse%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20state%20%3D%20stateTemp%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20sb.append%28charTemp%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D</code></pre><!--//code__9-->]]></content>
      
      
      <categories>
          
          <category> 1/0世界 </category>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅的使用IDEA</title>
      <link href="2020/02/10/%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8IDEA/"/>
      <url>2020/02/10/%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8IDEA/</url>
      
        <content type="html"><![CDATA[<p>IDEA作为Java界最好用的IDE，有大量的选项和插件供我们调教出自己喜欢的样式</p><h2 id="调节配置参数"><a href="#调节配置参数" class="headerlink" title="调节配置参数"></a>调节配置参数</h2><p>需要注意的是，配置这两个文件要在IDEA的Help菜单中打开，或者在开始界面打开  </p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307105500_7dda15f5c58aadd99071aa7d2e411cd4.png" alt="20200307105500_7dda15f5c58aadd99071aa7d2e411cd4.png"></p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307105624_43b0bb26d8c8e9fbcdffc6983b31211e.png" alt="20200307105624_43b0bb26d8c8e9fbcdffc6983b31211e.png"></p><h3 id="调节JVM虚拟机的运行参数"><a href="#调节JVM虚拟机的运行参数" class="headerlink" title="调节JVM虚拟机的运行参数"></a>调节JVM虚拟机的运行参数</h3><ul><li>-Xms128m，分配堆内存时初始内存。16G内存的机器可尝试设置为 -Xms512m</li><li>-Xmx750m，最大可使用的堆内存。16G内存的机器可尝试设置为 -Xmx2048m</li><li>-XX:ReservedCodeCacheSize=225m，16G内存的机器可尝试设置为-XX:ReservedCodeCacheSize=500m</li></ul><h3 id="调节IDEA的个性化配置"><a href="#调节IDEA的个性化配置" class="headerlink" title="调节IDEA的个性化配置"></a>调节IDEA的个性化配置</h3><ul><li>idea.cycle.buffer.size=1024，该属性主要用于控制控制台输出缓存。有遇到一些项目开启很多输出，控制台很快就被刷满了没办法再自动输出后面内容，这种项目建议增大该值或是直接禁用掉，禁用语句 idea.cycle.buffer.size=disabled。</li><li>idea.max.intellisense.filesize=2500，该属性主要用于提高在编辑大文件时候的代码帮助。IntelliJ IDEA 在编辑大文件的时候还是很容易卡顿的。该属性用于设置类文件的最大大小，如果超过这个大小可能导致类文件无法加载。可以调大一些：idea.max.intellisense.filesize=5000</li><li>idea.system.path=${user.home}/.IntelliJIdea/system，该属性主要用于指向 IntelliJ IDEA 的系统文件目录，默认是被注释，打开注释之后才算启用该属性，这里需要特别注意的是斜杠方向，这里用的是正斜杠。如果你的项目很多，则该目录会很大，如果你的 C 盘空间不够的时候，还是建议把该目录转移到其他盘符下。</li><li>idea.config.path=${user.home}/.IntelliJIdea/config，该属性主要用于指向 IntelliJ IDEA 的个性化配置目录，默认是被注释，打开注释之后才算启用该属性，这里需要特别注意的是斜杠方向，这里用的是正斜杠。其实这里可以把路径设置到OneDrive网盘的位置，这样就可以自动地备份、同步了。</li></ul><h2 id="设置IDEA的选项"><a href="#设置IDEA的选项" class="headerlink" title="设置IDEA的选项"></a>设置IDEA的选项</h2><p>需要注意，IDEA中的有一些设置在打开项目之后的设置默认是不影响到另一个项目的，如果想要调节全局设置，可以设置在开始界面的Configure菜单的Setting选项</p><h3 id="让IDEA更好看"><a href="#让IDEA更好看" class="headerlink" title="让IDEA更好看"></a>让IDEA更好看</h3><h4 id="设置鼠标悬浮提示"><a href="#设置鼠标悬浮提示" class="headerlink" title="设置鼠标悬浮提示"></a>设置鼠标悬浮提示</h4><p>即当鼠标移动到类或者方法上时，可以提示类或方法信息。</p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307110545_2f784c38cec6cc19d21909ea94a6e7e5.png" alt="20200307110545_2f784c38cec6cc19d21909ea94a6e7e5.png"></p><h4 id="开启行号和方法线"><a href="#开启行号和方法线" class="headerlink" title="开启行号和方法线"></a>开启行号和方法线</h4><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307111027_3579644aa23d08eea3629396afce7205.png" alt="20200307111027_3579644aa23d08eea3629396afce7205.png"></p><h4 id="滑动到最后还可以继续滑"><a href="#滑动到最后还可以继续滑" class="headerlink" title="滑动到最后还可以继续滑"></a>滑动到最后还可以继续滑</h4><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307111107_60f8a435236b6c6410e8774964193996.png" alt="20200307111107_60f8a435236b6c6410e8774964193996.png"></p><h3 id="设置代码换行"><a href="#设置代码换行" class="headerlink" title="设置代码换行"></a>设置代码换行</h3><ol><li>根据屏幕宽度换行。这是软换行，并不是真的换行<br> <img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307111310_daa103a9ea626cbfa1ab47600914c188.png" alt="20200307111310_daa103a9ea626cbfa1ab47600914c188.png"></li><li>根据代码长度换行。是真的换行<br><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307111422_b13ea302b8b828ecf8aa0a53e6c20f62.png" alt="20200307111422_b13ea302b8b828ecf8aa0a53e6c20f62.png"></li></ol><h3 id="取消保存自动删除行尾空格"><a href="#取消保存自动删除行尾空格" class="headerlink" title="取消保存自动删除行尾空格"></a>取消保存自动删除行尾空格</h3><p>IDEA在默认情况下会自动删除行尾的空格，这样可能造成在git上即使我们没有修改代码，但还是提示有修改。</p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307111701_342873369383e5541921695a4f6c5154.png" alt="20200307111701_342873369383e5541921695a4f6c5154.png"></p><h3 id="自动导入包"><a href="#自动导入包" class="headerlink" title="自动导入包"></a>自动导入包</h3><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307111822_fb855f18f38147656c13893460b29058.png" alt="20200307111822_fb855f18f38147656c13893460b29058.png">  </p><p>这里的选项1代表在书写代码时自动优化导入的包，比如去掉一些没用的包。选项2代表在书写代码时自动导入包。但对于同名的包，还需要<code>Alt+Enter</code>手动导入。</p><h3 id="代码提示"><a href="#代码提示" class="headerlink" title="代码提示"></a>代码提示</h3><p>Idea的代码提示默认区分大小写，默认为<code>First Letter Only</code>。我们可以取消<code>Match case</code>选项，这样就不区分大小写了。</p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307111953_91280125911225f4708be29e98e08160.png" alt="20200307111953_91280125911225f4708be29e98e08160.png"></p><p>在一些需要写SQL语句的地方，比如MyBatis的映射文件，我们也希望它可以像写代码一样提供表信息等的提示。这可以更改下面的两个地方实现</p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307112147_b6d2708fc8dc0d3f7b0c20ce6721adb2.png" alt="20200307112147_b6d2708fc8dc0d3f7b0c20ce6721adb2.png"></p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307112155_e9a972bc436aa491f329c1f1113c13fa.png" alt="20200307112155_e9a972bc436aa491f329c1f1113c13fa.png"></p><h2 id="IDEA的编码问题"><a href="#IDEA的编码问题" class="headerlink" title="IDEA的编码问题"></a>IDEA的编码问题</h2><h3 id="IDEA的默认编码和项目编码"><a href="#IDEA的默认编码和项目编码" class="headerlink" title="IDEA的默认编码和项目编码"></a>IDEA的默认编码和项目编码</h3><p>在<code>Editor -&gt; File Encodings</code> 选项卡中</p><ul><li>IDE 的编码默认是 UTF-8，Project Encoding 默认是 GBK，修改为 UTF-8。</li><li>properties设置了专门的编码，建议设为UTF-8，并且勾选Transparent native-to-ascii conversion 选项，该选项主要用于转化ASCII字符，一般都要勾选，不然 Properties 文件中的注释显示的都不会是中文。</li></ul><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307112817_f321b52d0f616715dd63b4475489b84c.png" alt="20200307112817_f321b52d0f616715dd63b4475489b84c.png"></p><h3 id="设置文件的字体"><a href="#设置文件的字体" class="headerlink" title="设置文件的字体"></a>设置文件的字体</h3><p>字体中必须包含中文，否则依然可能造成乱码、字符显示不出等问题</p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307112935_5416d21d86f606349c46a6d92eb99836.png" alt="20200307112935_5416d21d86f606349c46a6d92eb99836.png"></p><p>如图选项<code>Show only monospaced fonts</code>为只显示等宽字体，个人喜欢使用<code>Microsoft Yahei Mono</code>字体，包含中英文，样式和<code>Consola</code>字体类似。</p><h3 id="设置控制台的字体"><a href="#设置控制台的字体" class="headerlink" title="设置控制台的字体"></a>设置控制台的字体</h3><p>如果控制台字体出现乱码则需要修改该选项：</p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307113039_fe56bb7bbba5a143eb6fb9efd6811bc3.png" alt="20200307113039_fe56bb7bbba5a143eb6fb9efd6811bc3.png"></p><h3 id="Tomcat乱码"><a href="#Tomcat乱码" class="headerlink" title="Tomcat乱码"></a>Tomcat乱码</h3><p>如果你的 Tomcat 控制台输出乱码，并且你已经保证了本文上面的控制台字体设置的字体包含中文，那你还可以尝试下在 Tomcat 的 VM 参数上加上：<code>-Dfile.encoding=UTF-8</code></p><h2 id="使用待办事项"><a href="#使用待办事项" class="headerlink" title="使用待办事项"></a>使用待办事项</h2><p>我们可以使用TODO语句创建一个代办事项。待办事项的在下方的TODO窗口中可以看到。</p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307113236_e3d5eb1883730bef65b54271618bb39d.png" alt="20200307113236_e3d5eb1883730bef65b54271618bb39d.png"></p><p>如图所示，可以创建单行注释，也可以创建多行注释。使用多行注释的时候需要注意，第二行必须有缩进，不然就会只是当做普通注释</p><h2 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h2><ol><li><p>在Windows系统中，因为<code>Ctrl+Space</code>被系统的输入法占用掉了，所以可以更改为<code>Ctrl+,</code></p><p> <img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307113648_9d6cb1c580e51c2f3c1fd9f9de950481.png" alt="20200307113648_9d6cb1c580e51c2f3c1fd9f9de950481.png"></p></li><li>启用<code>Ctrl+鼠标滚轮</code>调节字体大小<br><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307113956_cb98bde763ec7ce8eafc7627e16e11da.png" alt="20200307113956_cb98bde763ec7ce8eafc7627e16e11da.png"></li></ol><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><ol><li>String Manipulation<br>这个插件可以对字符串进行一些大小写转换等操作，默认的快捷键是<code>Alt+M</code><br><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200307114359_6c474f3f0f6e2c207e166b36e055f4ff.png" alt="20200307114359_6c474f3f0f6e2c207e166b36e055f4ff.png"></li><li>Rainbow Brackets<br>将括号变成彩色，分辨一大堆括号可以更有层次感</li><li>Gitee<br>类似于IDEA中默认有的Github插件，Gitee插件提供了对码云仓库的一些访问</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://youmeek.gitbooks.io/intellij-idea-tutorial/content/" target="_blank" rel="noopener">Introduction · IntelliJ-IDEA-Tutorial</a></li><li><a href="https://www.cnblogs.com/zhangpengshou/p/5366413.html" target="_blank" rel="noopener">IntelliJ Idea 常用快捷键列表 - 一路前行 - 博客园</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>创建一个Hexo博客</title>
      <link href="2020/01/08/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAHexo%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/01/08/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAHexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="如何创建一个Hexo博客"><a href="#如何创建一个Hexo博客" class="headerlink" title="如何创建一个Hexo博客"></a>如何创建一个Hexo博客</h2><p>这个问题其实没有太大价值，因为网络上已经有很多关于此的文章，官网里的文档也写的非常清晰，本着不重复发明轮子的原则，在此不再赘述。</p><h2 id="使用自定义主题"><a href="#使用自定义主题" class="headerlink" title="使用自定义主题"></a>使用自定义主题</h2><p>我使用的是<a href="https://github.com/TriDiamond/hexo-theme-obsidian" target="_blank" rel="noopener">Obsidian</a>主题，至少在我现在看来主题还是挺好看的，配色、样式挺有科技感。移动端适配的也不错，并且作者看起来也还在更新。问题就是Bug挺多，我修改了一些问题，并且将它放在了我的<a href="https://github.com/lan-mao/hexo-theme-obsidian" target="_blank" rel="noopener">Github仓库</a>中，并且在作者更新了版本后尽量也更新。</p><h2 id="加速你的博客"><a href="#加速你的博客" class="headerlink" title="加速你的博客"></a>加速你的博客</h2><h3 id="加速不经常改动的资源"><a href="#加速不经常改动的资源" class="headerlink" title="加速不经常改动的资源"></a>加速不经常改动的资源</h3><p>如何加速，为了解决这个问题，我尝试了很多的解决方案，比如将博客放到到Coding上，但是发现Coding的IP在香港，在我这里访问更慢；另一个设置CDN加速，我尝试了七牛云和腾讯云两个平台，但不知道因为什么，并没有改善很多。</p><p>后来我发现如果部署到码云平台，它的page页面访问速度很快，但是码云的普通用户不能自定义域名，而且不会自动部署，上传之后必须手动部署才行。但另一方面，Github Pages可以自定义域名，并且还是很多个，支持自动部署。并且我发现，码云仓库的资源是可以直接访问的，而一些静态资源也不需要频繁更改，可以使用手工代替。更重要的是：放在码云上的文件不需要花钱。</p><p><img src="" data-echo="https://blog-source-1258302212.cos.ap-beijing.myqcloud.com/20200121105239_5d40b446b228b3950995bb6660d4f9c6.gif" alt=""></p><h3 id="把图片放在云上"><a href="#把图片放在云上" class="headerlink" title="把图片放在云上"></a>把图片放在云上</h3><p>图片就不能放在码云了，否则每次新写文章的时候就要手动部署一次，麻烦得很。不过使用VSCode的插件功能就可以自动上传图片到云端的资源库中。并且可以自动生成链接。用过Typora来写MD文章，虽然他的实时渲染功能十分炫酷，但是在Windows平台上不能用插件，使得我还是选择了VSCode。</p><p>腾讯云图片自动上传插件：<a href="https://marketplace.visualstudio.com/items?itemName=galenye.tencent-cloud-cos-upload-image" target="_blank" rel="noopener">tencent-cloud-cos-upload-image - Visual Studio Marketplace</a>，可以使用快捷键上传剪贴板上的图片和本地文件。</p><p>阿里云图床的插件：<a href="https://marketplace.visualstudio.com/items?itemName=vvkee.aliyun-oss-upload-image" target="_blank" rel="noopener">aliyun oss upload image - Visual Studio Marketplace</a></p><p>七牛云图床的自动上传插件：<a href="https://marketplace.visualstudio.com/items?itemName=imys.qiniu-upload-image" target="_blank" rel="noopener">qiniu-upload-image - Visual Studio Marketplace</a></p><blockquote><p>附一个插件：自动将剪贴板中的链接生成链接标签，并且标题是连接的标题，省好多事情：<a href="https://marketplace.visualstudio.com/items?itemName=kukushi.pasteurl" target="_blank" rel="noopener">Paste URL - Visual Studio Marketplace</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 1/0世界 </category>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
